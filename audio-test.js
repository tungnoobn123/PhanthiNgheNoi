
        class AudioTest {
            constructor() {
                this.isPlaying = false;
                this.currentQuestion = 1;
                this.currentSubQuestion = 1;
                this.countdownTime = 0;
                this.currentQuestionFiles = [];
                this.countdownTimer = null;
                this.usedFolders = {
                    2: [], // C√¢u 2-10
                    3: [], // C√¢u 11-13
                    4: []  // C√¢u 14-15
                };
                this.playlist = [];
                this.logEntries = [];
                this.displayQuestionIndex = 1; // üü¢ ƒë·ªÉ hi·ªÉn th·ªã s·ªë c√¢u h·ªèi t·ªïng h·ª£p

                // C·∫§U TR√öC TH∆Ø M·ª§C TH·ª∞C T·∫æ C·ª¶A B·∫†N
                this.audioFolders = {
                    "c√¢u 1": ["c1.mp3"],
                    "c√¢u 2": [
                        "Vi·ªác nh√†", "Ti·ªám t√≥c", "Th·ªùi trang", "Th·ªùi ti·∫øt", "Thi·∫øt b·ªã", 
                        "ThƒÉm h·ªèi", "S·ª©c kh·ªèe", "Shoping", "Phim ·∫£nh", "N√¥ng d√¢n", 
                        "Nh√† h√†ng", "Nh√†", "Ng∆∞·ªùi n·ªïi ti·∫øng", "Ng√†y ngh·ªâ l·ªÖ", "Ng√¢n h√†ng", "M√≥n ƒÉn", "Li√™n l·∫°c", "Kh√°ch s·∫°n",
                        "Internet", "Ho·∫°t ƒë·ªông v√†o th·ªùi gian r·∫£nh", "Gi·∫•y t·ªù t√πy th√¢n", "Giao th√¥ng", "Du l·ªãch 1", "ƒê·ªì n·ªôi th·∫•t", "ƒê·ªì ƒëi·ªán",
                        "ƒê·ªãa h√¨nh", "ƒêi b·ªô 1", "ƒêi b·ªô 2", "ƒê·∫∑t tr∆∞·ªõc", "C√¥ng vi√™n", "C√¥ng vi·ªác", "C·∫£nh s√°t", "B·ªánh vi·ªán", "√Çm nh·∫°c"
                    ],
                    "c√¢u 3": [
                        "Phim ·∫£nh", "Shoping", "Thi·∫øt b·ªã 1", "Thi·∫øt b·ªã 2", "Ti·ªám t√≥c", 
                        "internet", "Kh√°ch s·∫°n", "Ng√¢n h√†ng", "Nh√†", "Nh√† h√†ng", 
                        "Gi·∫©y t·ªù t√πy th√¢n", "Du l·ªãch", "ƒê·ªì n·ªôi th·∫•t", "ƒê·ªì ƒëi·ªán", "c√¥ng vi√™n", "B·ªánh vi·ªán"
                    ],
                    "c√¢u 4": [
                        "√Çm nh·∫°c", "B·ªánh vi·ªán", "C√¥ng vi√™n", "ƒêi b·ªô", "ƒê·ªãa h√¨nh", 
                        "du l·ªãch", "Gi·∫•y t·ªù t√πy th√¢n", "Ng∆∞·ªùi n·ªïi ti·∫øng", "Nh√†", "Nh√† 2", 
                        "Nh√† h√†ng", "Phim ·∫£nh"
                    ]
                };

                this.initializeEventListeners();
                this.updateStatus();
                this.writeLog("·ª®ng d·ª•ng ƒë√£ kh·ªüi t·∫°o. H·ªó tr·ª£ th·ªùi gian ch·ªù t·ª´ t√™n file!");
            }

            initializeEventListeners() {
                   document.getElementById('btnStart').addEventListener('click', () => this.showLoginModal());
    document.getElementById('btnStop').addEventListener('click', () => this.stopTest());
    document.getElementById('btnNext').addEventListener('click', () => this.nextQuestion());
    document.getElementById('btnExport').addEventListener('click', () => this.exportPlaylist());
    document.getElementById('btnLog').addEventListener('click', () => this.viewLog());

                const audioPlayer = document.getElementById('audioPlayer');
                audioPlayer.addEventListener('ended', () => this.handleAudioEnded());

                 // N√∫t trong modal
                    document.getElementById('btnLoginConfirm').addEventListener('click', () => this.handleLogin());
                    document.getElementById('btnLoginCancel').addEventListener('click', () => this.closeLoginModal());
            }

            async checkFileExists(url) {
                try {
                    const response = await fetch(url, { method: 'HEAD' });
                    return response.status === 200;
                } catch (error) {
                    console.log(`L·ªói khi ki·ªÉm tra file ${url}:`, error);
                    return false;
                }
            }
           
            showLoginModal() {
    document.getElementById('loginModal').style.display = 'block';
}

closeLoginModal() {
    document.getElementById('loginModal').style.display = 'none';
}

async handleLogin() {
    const user = document.getElementById('loginUser').value.trim();
    const password = document.getElementById('loginPassword').value.trim();
    const message = document.getElementById('loginMessage');

    if (!user || !password) {
        message.textContent = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√†i kho·∫£n v√† m·∫≠t kh·∫©u.";
        return;
    }

    message.textContent = "üîÑ ƒêang ki·ªÉm tra t√†i kho·∫£n...";

    try {
        // üîπ G·ªçi API Google Sheet th√¥ng qua opensheet
        const sheetId = "1yxtqSjrgVBa3dgk3to9ytc9F5J3-nWehXjgQdOgbqrI";
        const sheetName = "taikhoan"; // thay b·∫±ng t√™n sheet th·ª±c t·∫ø
        const url = `https://opensheet.elk.sh/${sheetId}/${sheetName}`;

        const response = await fetch(url);
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheet");

        const sheetData = await response.json();

        // üîç Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
        const found = sheetData.find(row =>
            row.USERID === user && row.PW === password
        );

        if (found) {
            message.textContent = "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!";
            // ·∫®n modal n·∫øu c√≥
            if (typeof $ !== 'undefined' && $('#loginModal').length) {
                $('#loginModal').modal('hide');
                $('#loginModal').hide();
            }
               // X√≥a backdrop n·∫øu c√≤n s√≥t
            $('body').removeClass('modal-open');
            $('.modal-backdrop').remove();
            // B·∫Øt ƒë·∫ßu b√†i test
            this.startTest();
        } else {
            message.textContent = "‚ùå Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.";
        }

    } catch (error) {
        console.error("L·ªói:", error);
        message.textContent = "‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ho·∫∑c l·ªói m·∫°ng.";
    }
}



            startTest() {
                this.writeLog("=== B·∫ÆT ƒê·∫¶U B√ÄI THI ===");
                
                this.currentQuestion = 1;
                this.currentSubQuestion = 1;
                this.isPlaying = true;
                
                this.usedFolders[2] = [];
                this.usedFolders[3] = [];
                this.usedFolders[4] = [];
                
                this.updateControls();
                this.playQuestion();
            }

            stopTest() {
                this.writeLog("=== D·ª™NG B√ÄI THI ===");
                this.stopAll();
                this.isPlaying = false;
                this.updateControls();
            }

          nextQuestion() {
    this.writeLog(`NEXT - C√¢u ${this.currentQuestion}.${this.currentSubQuestion}`);

    if (this.currentSubQuestion < this.currentQuestionFiles.length) {
        this.skipToNextSubQuestion(); // chuy·ªÉn sang file ti·∫øp theo c√πng th∆∞ m·ª•c
    } else {
        this.skipToNextQuestion(); // chuy·ªÉn nh√≥m m·ªõi
    }
}


            skipToNextSubQuestion() {
                //this.stopAll();
                this.writeLog(`B·ªé QUA file ${this.currentQuestion}.${this.currentSubQuestion}`);
                
               this.stopAll();
    this.currentSubQuestion++;
    this.displayQuestionIndex++; // üü¢ tƒÉng s·ªë c√¢u t·ªïng h·ª£p
    this.updateStatus();
    this.playCurrentSubQuestion();
            }

           skipToNextQuestion() {
  this.stopAll();

    // X√°c ƒë·ªãnh b∆∞·ªõc nh·∫£y
    let step = 1;
    if (this.currentQuestion >= 1 && this.currentQuestion <= 1) step = 1;
    else if (this.currentQuestion >= 2 && this.currentQuestion <= 10) step = 3;
    else if (this.currentQuestion >= 11 && this.currentQuestion <= 13) step = 3;
    else if (this.currentQuestion >= 14 && this.currentQuestion <= 15) step = 2;

    this.currentQuestion += step;
    this.currentSubQuestion = 1;
    this.currentQuestionFiles = [];
    this.displayQuestionIndex++; // tƒÉng c√¢u t·ªïng h·ª£p
    this.updateStatus();

    // Ki·ªÉm tra k·∫øt th√∫c
    if (this.currentQuestion > 15) {
        this.writeLog("=== K·∫æT TH√öC B√ÄI THI ===");
        alert("K·∫æT TH√öC B√ÄI THI!");
        this.isPlaying = false;
        this.updateControls();
        return;
    }

    this.writeLog(`CHUY·ªÇN SANG C√ÇU ${this.currentQuestion}`);
    this.playQuestion();
}


            stopAll() {
                if (this.countdownTimer) {
                    clearInterval(this.countdownTimer);
                }
                this.stopAudio();
            }

            stopAudio() {
                const audioPlayer = document.getElementById('audioPlayer');
                audioPlayer.pause();
                audioPlayer.currentTime = 0;
            }

           playQuestion() {
    this.updateStatus();
    this.writeLog(`B·∫Øt ƒë·∫ßu c√¢u h·ªèi ${this.currentQuestion}`);

    if (this.currentQuestion > 15) {
        this.writeLog("=== K·∫æT TH√öC B√ÄI THI ===");
        alert("K·∫æT TH√öC B√ÄI THI!");
        this.isPlaying = false;
        this.updateControls();
        return;
    }

    if (this.currentQuestion === 1) {
        this.playQuestion1();
    } else if (this.currentQuestion >= 2 && this.currentQuestion <= 10) {
        this.playGroupQuestion("c√¢u 2", 2, 3); // 3 th∆∞ m·ª•c, m·ªói th∆∞ m·ª•c 3 file
    } else if (this.currentQuestion >= 11 && this.currentQuestion <= 13) {
        this.playGroupQuestion("c√¢u 3", 3, 1); // 1 th∆∞ m·ª•c, 3 file
    } else if (this.currentQuestion >= 14 && this.currentQuestion <= 15) {
        this.playGroupQuestion("c√¢u 4", 4, 1); // 1 th∆∞ m·ª•c, 2 file
    }
}
async playGroupQuestion(questionFolder, questionType, numFolders) {
    // N·∫øu ch∆∞a kh·ªüi t·∫°o danh s√°ch th∆∞ m·ª•c cho nh√≥m n√†y th√¨ t·∫°o
    if (!this.groupFolders) this.groupFolders = {};
    if (!this.groupFolders[questionType]) this.groupFolders[questionType] = [];

    // N·∫øu ch∆∞a random ƒë·ªß th∆∞ m·ª•c ‚Üí random th√™m
    while (this.groupFolders[questionType].length < numFolders) {
        const available = this.audioFolders[questionFolder].filter(f => 
            !this.usedFolders[questionType].includes(f)
        );
        if (available.length === 0) {
            this.writeLog(`Kh√¥ng c√≤n th∆∞ m·ª•c kh·∫£ d·ª•ng cho ${questionFolder}`);
            break;
        }
        const randomFolder = available[Math.floor(Math.random() * available.length)];
        this.usedFolders[questionType].push(randomFolder);
        this.groupFolders[questionType].push(randomFolder);
    }

    // X√°c ƒë·ªãnh ƒëang ·ªü th∆∞ m·ª•c n√†o
    const currentFolderIndex = Math.floor(
        (this.currentQuestion - (questionType === 2 ? 2 : questionType === 3 ? 11 : 14)) / 
        (questionType === 2 ? 3 : questionType === 3 ? 3 : 2)
    );
    const folderName = this.groupFolders[questionType][currentFolderIndex];

    this.writeLog(`C√¢u ${this.currentQuestion}: ch·ªçn th∆∞ m·ª•c ${folderName}`);
    await this.loadQuestionFilesByGroup(questionFolder, folderName, questionType);
}
async loadQuestionFilesByGroup(questionFolder, folderName, questionType) {
    this.currentQuestionFiles = [];

    const possibleFiles = {
        'c1': ["c1(60).mp3", "c1(90).mp3", "c1(120).mp3", "c1.mp3"],
        'c2': ["c2(60).mp3", "c2(90).mp3", "c2(120).mp3", "c2.mp3"],
        'c3': ["c3(60).mp3", "c3(90).mp3", "c3(120).mp3", "c3.mp3"],
        'c4': ["c4(60).mp3", "c4(90).mp3", "c4(120).mp3", "c4.mp3"]
    };

    const foundFiles = [];

    // 2‚Äì10 v√† 11‚Äì13 c·∫ßn 3 file (c1,c2,c3)
    // 14‚Äì15 c·∫ßn 2 file (c1,c2)
    if (questionType === 2 || questionType === 3) {
        await this.findAndAddFile(questionFolder, folderName, possibleFiles.c1, 'c1', foundFiles);
        await this.findAndAddFile(questionFolder, folderName, possibleFiles.c2, 'c2', foundFiles);
        await this.findAndAddFile(questionFolder, folderName, possibleFiles.c3, 'c3', foundFiles);
    } else if (questionType === 4) {
        await this.findAndAddFile(questionFolder, folderName, possibleFiles.c1, 'c1', foundFiles);
        await this.findAndAddFile(questionFolder, folderName, possibleFiles.c2, 'c2', foundFiles);
    }

    this.currentQuestionFiles = foundFiles.map(f => f.path);

    if (this.currentQuestionFiles.length === 0) {
        alert(`Kh√¥ng t√¨m th·∫•y file audio trong ${folderName}`);
        this.skipToNextQuestion();
        return;
    }

    this.currentSubQuestion = 1;
    this.playCurrentSubQuestion();
}

         async playQuestion1() {
    const possibleFiles = ["c1(60).mp3", "c1(90).mp3", "c1(120).mp3", "c1.mp3"];
    let foundFile = null;

    for (const file of possibleFiles) {
        const filePath = this.getAudioPath("c√¢u 1", null, file);
        const fileExists = await this.checkFileExists(filePath);
        if (fileExists) {
            foundFile = filePath;
            this.writeLog(`C√¢u 1: T√¨m th·∫•y file ${file}`);
            break;
        }
    }

    if (foundFile) {
        this.currentQuestionFiles = [foundFile];
        this.currentSubQuestion = 1;

        // Ph√°t file ƒë·∫ßu ti√™n
        await this.playCurrentSubQuestion();

        // ‚úÖ Sau khi ph√°t xong, b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
        const waitTime = this.getWaitTimeForQuestion(1); // c√≥ th·ªÉ l√† 60 / 90 / 120
        this.writeLog(`Ch·ªù ${waitTime} gi√¢y tr∆∞·ªõc khi sang c√¢u ti·∫øp theo...`);

        this.startCountdown(waitTime, () => {
            // ‚úÖ Sau khi ƒë·∫øm xong, chuy·ªÉn sang c√¢u 2
            this.skipToNextQuestion();
        });
    } else {
        this.writeLog(`L·ªñI: Kh√¥ng t√¨m th·∫•y file c√¢u 1`);
        alert(`L·ªñI: Kh√¥ng t√¨m th·∫•y file c√¢u 1!`);
        this.skipToNextQuestion();
    }
}


            playQuestion2To10() {
                this.loadRandomFolder("c√¢u 2", 2);
            }

            playQuestion11To13() {
                this.loadRandomFolder("c√¢u 3", 3);
            }

            playQuestion14To15() {
                this.loadRandomFolder("c√¢u 4", 4);
            }

            async loadRandomFolder(questionFolder, questionType) {
                const availableFolders = this.audioFolders[questionFolder].filter(folder => 
                    !this.usedFolders[questionType].includes(folder)
                );

                if (availableFolders.length === 0) {
                    this.writeLog(`L·ªñI: ƒê√£ d√πng h·∫øt th∆∞ m·ª•c cho c√¢u ${this.currentQuestion}`);
                    alert("ƒê√£ d√πng h·∫øt th∆∞ m·ª•c cho c√¢u h·ªèi n√†y!");
                    this.skipToNextQuestion();
                    return;
                }

                const randomFolder = availableFolders[Math.floor(Math.random() * availableFolders.length)];
                this.usedFolders[questionType].push(randomFolder);

                this.writeLog(`C√¢u ${this.currentQuestion}: Ch·ªçn th∆∞ m·ª•c ${randomFolder}`);
                await this.loadQuestionFiles(questionFolder, randomFolder);
            }

            async loadQuestionFiles(questionFolder, folderName) {
                this.currentQuestionFiles = [];
                this.writeLog(`TH∆Ø M·ª§C ƒê∆Ø·ª¢C CH·ªåN: ${folderName}`);

                // Danh s√°ch file c√≥ th·ªÉ c√≥ - ∆ØU TI√äN FILE C√ì TH·ªúI GIAN TR∆Ø·ªöC
                const possibleFiles = {
                    'c1': ["c1(60).mp3", "c1(90).mp3", "c1(120).mp3", "c1.mp3"],
                    'c2': ["c2(60).mp3", "c2(90).mp3", "c2(120).mp3", "c2.mp3"],
                    'c3': ["c3(60).mp3", "c3(90).mp3", "c3(120).mp3", "c3.mp3"],
                    'c4': ["c4(60).mp3", "c4(90).mp3", "c4(120).mp3", "c4.mp3"]
                };

                // T√¨m file th·ª±c t·∫ø t·ªìn t·∫°i
                const foundFiles = [];
                
                // T√¨m c1 (th·ª≠ t·∫•t c·∫£ bi·∫øn th·ªÉ)
                await this.findAndAddFile(questionFolder, folderName, possibleFiles.c1, 'c1', foundFiles);
                
                // T√¨m c2
                await this.findAndAddFile(questionFolder, folderName, possibleFiles.c2, 'c2', foundFiles);
                
                // Random ch·ªçn gi·ªØa c3 v√† c4
                const c3Found = await this.findFile(questionFolder, folderName, possibleFiles.c3);
                const c4Found = await this.findFile(questionFolder, folderName, possibleFiles.c4);
                
                if (c3Found && c4Found) {
                    const selected = Math.random() < 0.5 ? 
                        { name: 'c3', path: c3Found.path, fileName: c3Found.fileName } : 
                        { name: 'c4', path: c4Found.path, fileName: c4Found.fileName };
                    foundFiles.push(selected);
                    this.writeLog(`RANDOM CH·ªåN: ${selected.fileName}`);
                } else if (c3Found) {
                    foundFiles.push({ name: 'c3', path: c3Found.path, fileName: c3Found.fileName });
                } else if (c4Found) {
                    foundFiles.push({ name: 'c4', path: c4Found.path, fileName: c4Found.fileName });
                }

                // S·∫Øp x·∫øp theo th·ª© t·ª± c1, c2, c3/c4
                const sortedFiles = [];
                sortedFiles.push(...foundFiles.filter(f => f.name === 'c1'));
                sortedFiles.push(...foundFiles.filter(f => f.name === 'c2'));
                sortedFiles.push(...foundFiles.filter(f => f.name === 'c3' || f.name === 'c4'));

                this.currentQuestionFiles = sortedFiles.map(f => f.path);

                // Log chi ti·∫øt
                this.writeLog(`T√åM TH·∫§Y ${sortedFiles.length} FILE:`);
                sortedFiles.forEach(file => {
                    this.writeLog(`- ${file.fileName} (${file.path})`);
                });

                // N·∫øu kh√¥ng t√¨m th·∫•y file n√†o, b√°o l·ªói
                if (this.currentQuestionFiles.length === 0) {
                    this.writeLog(`L·ªñI: Kh√¥ng t√¨m th·∫•y file n√†o trong th∆∞ m·ª•c ${folderName}`);
                    alert(`L·ªñI: Kh√¥ng t√¨m th·∫•y file audio trong th∆∞ m·ª•c ${folderName}!`);
                    this.skipToNextQuestion();
                    return;
                }

                this.currentSubQuestion = 1;
                this.playCurrentSubQuestion();
            }

            // H√†m m·ªõi: t√¨m v√† th√™m file n·∫øu t·ªìn t·∫°i
            async findAndAddFile(questionFolder, folderName, fileList, fileType, foundFiles) {
                const found = await this.findFile(questionFolder, folderName, fileList);
                if (found) {
                    foundFiles.push({ 
                        name: fileType, 
                        path: found.path, 
                        fileName: found.fileName 
                    });
                    this.writeLog(`T√åM TH·∫§Y ${fileType}: ${found.fileName}`);
                } else {
                    this.writeLog(`KH√îNG T√åM TH·∫§Y ${fileType} trong ${fileList.join(', ')}`);
                }
            }

            // H√†m m·ªõi: t√¨m file ƒë·∫ßu ti√™n t·ªìn t·∫°i trong danh s√°ch
            async findFile(questionFolder, folderName, fileList) {
                for (const fileName of fileList) {
                    const filePath = this.getAudioPath(questionFolder, folderName, fileName);
                    const fileExists = await this.checkFileExists(filePath);
                    if (fileExists) {
                        return { path: filePath, fileName: fileName };
                    }
                }
                return null;
            }

            async playCurrentSubQuestion() {
                if (this.currentSubQuestion > this.currentQuestionFiles.length) {
                    this.skipToNextQuestion();
                    return;
                }

                const filePath = this.currentQuestionFiles[this.currentSubQuestion - 1];
                const fileName = this.getFileNameFromPath(filePath);
                
                this.writeLog(`C√¢u ${this.currentQuestion}.${this.currentSubQuestion}: Ph√°t file ${fileName} l·∫ßn 1`);
                
                // Ph√°t l·∫ßn 1
                await this.playAudioFile(filePath);
                
                // Ph√°t l·∫ßn 2
                this.writeLog(`C√¢u ${this.currentQuestion}.${this.currentSubQuestion}: Ph√°t file ${fileName} l·∫ßn 2`);
                await this.playAudioFile(filePath);

                this.updateStatus(); // üü¢ c·∫≠p nh·∫≠t hi·ªÉn th·ªã khi ƒë·ªïi file
this.updateStatus(); // üü¢ g·ªçi l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t t√™n m·ªói l·∫ßn ph√°t file
                // L·∫•y th·ªùi gian ch·ªù T·ª∞ ƒê·ªòNG t·ª´ t√™n file
                const waitTime = this.extractWaitTimeFromFileName(fileName);
                this.writeLog(`C√¢u ${this.currentQuestion}.${this.currentSubQuestion}: B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c ${waitTime} gi√¢y (t·ª´ t√™n file)`);
                this.startCountdown(waitTime);
            }

            // H√ÄM M·ªöI: tr√≠ch xu·∫•t th·ªùi gian ch·ªù t·ª´ t√™n file
            extractWaitTimeFromFileName(fileName) {
                // T√¨m s·ªë trong ngo·∫∑c ƒë∆°n: c1(60).mp3 ‚Üí 60
                const match = fileName.match(/\((\d+)\)/);
                
                if (match && match[1]) {
                    const waitTime = parseInt(match[1]);
                    this.writeLog(`ƒê·ªåC TH·ªúI GIAN CH·ªú: ${fileName} ‚Üí ${waitTime} gi√¢y`);
                    return waitTime;
                } else {
                    // Fallback: n·∫øu kh√¥ng t√¨m th·∫•y s·ªë trong ngo·∫∑c, d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
                    const defaultTime = this.getDefaultWaitTime();
                    this.writeLog(`KH√îNG T√åM TH·∫§Y TH·ªúI GIAN: ${fileName}, d√πng m·∫∑c ƒë·ªãnh: ${defaultTime} gi√¢y`);
                    return defaultTime;
                }
            }

            // Fallback: th·ªùi gian ch·ªù m·∫∑c ƒë·ªãnh
            getDefaultWaitTime() {
                if (this.currentQuestion === 1) return 60;

                if (this.currentQuestion >= 2 && this.currentQuestion <= 10) {
                    switch (this.currentSubQuestion) {
                        case 1: return 60;
                        case 2: return 60;
                        case 3: return 120;
                        default: return 60;
                    }
                }

                if (this.currentQuestion >= 11 && this.currentQuestion <= 13) {
                    switch (this.currentSubQuestion) {
                        case 1: return 90;
                        case 2: return 120;
                        case 3: return 120;
                        default: return 90;
                    }
                }

                if (this.currentQuestion >= 14 && this.currentQuestion <= 15) {
                    return 60;
                }

                return 60;
            }

            async playAudioFile(filePath) {
                return new Promise(async (resolve) => {
                    const audioPlayer = document.getElementById('audioPlayer');
                    
                    const fileExists = await this.checkFileExists(filePath);
                    
                    if (!fileExists) {
                        this.writeLog(`L·ªñI: File kh√¥ng t·ªìn t·∫°i - ${filePath}`);
                        document.getElementById('lblCurrentFile').textContent = `L·ªñI: File kh√¥ng t·ªìn t·∫°i`;
                        resolve();
                        return;
                    }
                    
                    audioPlayer.src = filePath;
                    
                    this.writeLog(`B·∫ÆT ƒê·∫¶U PH√ÅT: ${this.getFileNameFromPath(filePath)}`);
                    document.getElementById('lblCurrentFile').textContent = `ƒêang ph√°t: ${this.getFileNameFromPath(filePath)}`;
                    
                    audioPlayer.onended = () => {
                        this.writeLog(`K·∫æT TH√öC PH√ÅT: ${this.getFileNameFromPath(filePath)}`);
                        resolve();
                    };
                    
                    audioPlayer.onerror = (error) => {
                        this.writeLog(`L·ªñI PH√ÅT AUDIO: ${error.target.error?.message || 'Unknown error'}`);
                        document.getElementById('lblCurrentFile').textContent = `L·ªói ph√°t audio`;
                        resolve();
                    };
                    
                    try {
                        await audioPlayer.play();
                    } catch (error) {
                        this.writeLog(`L·ªñI KHI PH√ÅT: ${error.message}`);
                        resolve();
                    }
                });
            }

            handleAudioEnded() {
                // X·ª≠ l√Ω khi audio k·∫øt th√∫c
            }

            startCountdown(seconds) {
                this.countdownTime = seconds;
                this.updateCountdownDisplay();
                
                if (this.countdownTimer) {
                    clearInterval(this.countdownTimer);
                }
                
                this.countdownTimer = setInterval(() => {
                    this.countdownTime--;
                    this.updateCountdownDisplay();
                    
                    if (this.countdownTime <= 0) {
                        clearInterval(this.countdownTimer);
                        this.playNextSubQuestion();
                    }
                }, 1000);
            }

            playNextSubQuestion() {
                // Thay v√¨ lu√¥n tƒÉng subQuestion, ki·ªÉm tra xem c√≤n file kh√¥ng
                if (this.currentSubQuestion < this.currentQuestionFiles.length) {
                    this.skipToNextSubQuestion();  // Chuy·ªÉn file ti·∫øp theo trong c√¢u
                } else {
                    this.skipToNextQuestion();     // Chuy·ªÉn sang c√¢u m·ªõi
                }
            }

            getAudioPath(questionFolder, folderName, fileName) {
                let path;
                
                if (folderName && fileName) {
                    path = `audio/${questionFolder}/${folderName}/${fileName}`;
                } else if (fileName) {
                    path = `audio/${questionFolder}/${fileName}`;
                }
                
                return path;
            }

            getFileNameFromPath(path) {
                return path.split('/').pop() || path;
            }

            updateCountdownDisplay() {
                document.getElementById('lblCountdown').textContent = `ƒê·∫øm ng∆∞·ª£c: ${this.countdownTime}s`;
                const maxTime = 120;
                const progressPercent = (this.countdownTime / maxTime) * 100;
                document.getElementById('progressBar').style.width = `${progressPercent}%`;
                
                const progressBar = document.getElementById('progressBar');
                if (this.countdownTime < 30) {
                    progressBar.style.background = 'linear-gradient(90deg, #ff6b6b, #ee5a24)';
                } else if (this.countdownTime < 60) {
                    progressBar.style.background = 'linear-gradient(90deg, #ffd93d, #ff9a3d)';
                } else {
                    progressBar.style.background = 'linear-gradient(90deg, #00b09b, #96c93d)';
                }
            }

          updateStatus() {
  const lblStatus = document.getElementById('lblStatus');
    const lblCurrentFile = document.getElementById('lblCurrentFile');

    const totalQuestions = this.totalQuestions || 15; // t·ªïng s·ªë c√¢u trong b√†i
    const totalFiles = this.currentQuestionFiles ? this.currentQuestionFiles.length : 0;
    const currentFileName = this.currentQuestionFiles && this.currentQuestionFiles.length >= this.currentSubQuestion
        ? this.getFileNameFromPath(this.currentQuestionFiles[this.currentSubQuestion - 1])
        : "---";

    // üü¢ Hi·ªÉn th·ªã s·ªë c√¢u h·ªèi t·ªïng h·ª£p (displayQuestionIndex)
    lblStatus.textContent = `C√¢u h·ªèi: ${this.displayQuestionIndex}/${totalQuestions} - File: ${this.currentSubQuestion}/${totalFiles}`;
    lblCurrentFile.textContent = currentFileName;
}


            updateControls() {
                document.getElementById('btnStart').disabled = this.isPlaying;
                document.getElementById('btnStop').disabled = !this.isPlaying;
                document.getElementById('btnNext').disabled = !this.isPlaying;
            }

            writeLog(message) {
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = `[${timestamp}] ${message}`;
                this.logEntries.push(logEntry);
                
                const logContainer = document.getElementById('logContainer');
                const logElement = document.createElement('div');
                logElement.className = 'log-entry';
                logElement.innerHTML = `<span class="log-time">[${timestamp}]</span> <span class="log-message">${message}</span>`;
                logContainer.appendChild(logElement);
                logContainer.scrollTop = logContainer.scrollHeight;
                
                if (this.logEntries.length > 50) {
                    this.logEntries.shift();
                    if (logContainer.children.length > 50) {
                        logContainer.removeChild(logContainer.firstChild);
                    }
                }
                
                console.log(logEntry);
            }

            exportPlaylist() {
                const playlistContent = "=== DANH S√ÅCH FILE AUDIO ƒê√É PH√ÅT ===\n" +
                                       `Th·ªùi gian: ${new Date().toLocaleString()}\n\n` +
                                       this.logEntries.join('\n');
                
                const blob = new Blob([playlistContent], { type: 'text/plain;charset=utf-8' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = `playlist_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.txt`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.writeLog("ƒê√É EXPORT PLAYLIST");
                alert("ƒê√£ export danh s√°ch file audio!");
            }

            viewLog() {
                const logWindow = window.open('', '_blank', 'width=800,height=600');
                logWindow.document.write(`
                    <html>
                        <head><title>Audio Test Log</title></head>
                        <body style="font-family: monospace; padding: 20px;">
                            <h2>Audio Test Log</h2>
                            <pre>${this.logEntries.join('\n')}</pre>
                        </body>
                    </html>
                `);
            }
        }

        // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
        const audioTest = new AudioTest();
